{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalCounters","console","log","className","href","Counter","prevProps","prevState","this","getBadgeClasses","formatCount","onClick","props","onIncrement","counter","onDecrement","onDelete","id","classes","value","count","Component","Counters","onReset","counters","map","key","App","state","handleIncrement","index","indexOf","setState","handleDecrement","handleReset","c","handleDelete","counterId","filter","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e3a45391.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n//Stateless Functional Component\r\nconst NavBar = ({ totalCounters }) => {\r\n  console.log(\"NavBar - Rendered\");\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <a className=\"navbar-brand\" href=\"#\">\r\n        Number of active Counters:\r\n        <span className=\"badge badge-pill badge-secondary\">\r\n          {totalCounters}\r\n        </span>\r\n      </a>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  componentDidUpdate(prevProps, prevState) {\r\n    console.log(\"prevProps\", prevProps);\r\n    console.log(\"prevState\", prevState);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    console.log(\"Conuter - unnmount\");\r\n  }\r\n\r\n  render() {\r\n    console.log(\"Counter - Rendered\");\r\n\r\n    return (\r\n      <div>\r\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n        <button\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm\"\r\n        >\r\n          Increment\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.onDecrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm m-2\"\r\n        >\r\n          Decrement\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n          className=\"btn btn-danger btn-sm m-2\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getBadgeClasses() {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  formatCount() {\r\n    const { value: count } = this.props.counter;\r\n    return count === 0 ? \"Zero\" : count;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  render() {\r\n    console.log(\"Counters - Rendered\");\r\n\r\n    const {\r\n      onReset,\r\n      onDelete,\r\n      onIncrement,\r\n      onDecrement,\r\n      counters,\r\n    } = this.props;\r\n    return (\r\n      <div>\r\n        <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">\r\n          Reset All\r\n        </button>\r\n        {counters.map((counter) => (\r\n          <Counter\r\n            key={counter.id}\r\n            onDelete={onDelete}\r\n            onIncrement={onIncrement}\r\n            onDecrement={onDecrement}\r\n            counter={counter}\r\n          ></Counter>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, {\n  Component\n} from 'react';\nimport './App.css';\nimport NavBar from './components/navbar'\nimport Counters from \"./components/counters\";\n\nclass App extends Component {\n\n  state = {\n    counters: [{\n        id: 1,\n        value: 1\n      },\n      {\n        id: 2,\n        value: 0\n      },\n      {\n        id: 3,\n        value: 0\n      },\n      {\n        id: 4,\n        value: 5\n      },\n    ],\n  };\n\n  constructor() {\n    super();\n    console.log('App - Constructor');\n  }\n\n  componentDidMount() {\n    console.log('App - mounted');\n  }\n\n  handleIncrement = (counter) => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = {\n      ...counter\n    };\n    counters[index].value++;\n    this.setState({\n      counters\n    });\n  };\n\n  handleDecrement = (counter) => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = {\n      ...counter\n    };\n    counters[index].value--;\n    this.setState({\n      counters\n    });\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map((c) => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({\n      counters\n    });\n  };\n\n  handleDelete = (counterId) => {\n    const counters = this.state.counters.filter((c) => c.id !== counterId);\n    this.setState({\n      counters\n    });\n  };\n\n  render() {\n    console.log('App - rendered');\n\n    return ( <\n      React.Fragment >\n      <\n      NavBar totalCounters = {\n        this.state.counters.filter(c => c.value > 0).length\n      } > < /NavBar> <\n      main className = \"container\" >\n      <\n      Counters onReset = {\n        this.handleReset\n      }\n      onIncrement = {\n        this.handleIncrement\n      }\n      onDecrement = {\n        this.handleDecrement\n      }\n      counters = {\n        this.state.counters\n      }\n      onDelete = {\n        this.handleDelete\n      } > < /Counters> < /\n      main > <\n      /React.Fragment>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render( <\n  React.StrictMode >\n  <\n  App / >\n  <\n  /React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}